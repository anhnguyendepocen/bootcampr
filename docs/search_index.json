[
["the-basics-of-r.html", "Chapter 2 The Basics of R 2.1 Math", " Chapter 2 The Basics of R The MOST IMPORTANT thing about writing code is to comment it with descriptions of what each portion of code does, not only for your own sanity when revisiting code, but also to allow others who may use your code to make sense of it. R will ignore lines that start with a pound sign/“hashtag” as comments # R won&#39;t run this line &quot;But R will run this line, and each uncommented one after this, in order within your file.&quot; ## [1] &quot;But R will run this line, and each uncommented one after this, in order within your file.&quot; You can write code and run it directly from within R or RStudio (Ctrl+Enter), or you can run code from R scripts by using the function source source(&quot;welcome.R&quot;) But this won’t work until we are in the same directory (folder) as the file… First, let’s find out where we are. We do this with the getwd function. As a brief aside: in R, you need to follow most functions with parentheses, although sometimes you won’t need to put anything in these parentheses getwd() ## [1] &quot;C:/Users/collin/Documents/GitHub/bootcampR/docs/bookdown-demo-master&quot; I forgot- I put the welcome script within the folder “~/day1/Welcome/”, setwd there. If you’re using RStudio, as you can autocomplete filenames with the tab key. setwd(&quot;bootcampR/day1/Welcome/&quot;) If you’re not a fan of doing things through the command line/script (soon you will be), there are GUI ways to do this, too: choose.dir (in Windows) setwd(choose.dir()) Now we can finally run the welcome script source(&quot;../../day1/Welcome/welcome.R&quot;) ## Welcome to the R for Data Science Bootcamp! ## We&#39;re going to be learning some awesome stuff Just like you can use a GUI to choose a folder, you can do the same for files source(choose.files()) Alright, now that we’re done with that, let’s go back to the parent directory with the ../ shortcut to say “go up one directory in the file structure” setwd(&quot;../&quot;) 2.1 Math At it’s heart, R is just a big calculator… Addition 1 + 2 ## [1] 3 Subtraction 2 - 1 Multiplication 2 * 3 Division 4 / 2 Exponents 3 ^ 2 Modulo (a.k.a. Remainder) 5 %% 2 Integer (Floor) Division 5 %/% 2 "],
["order-of-operations.html", "Chapter 3 Order of Operations:", " Chapter 3 Order of Operations: "],
["exponents-right-to-left.html", "Chapter 4 1. Exponents (right to left)", " Chapter 4 1. Exponents (right to left) "],
["modulo-left-to-right.html", "Chapter 5 2. Modulo (left to right)", " Chapter 5 2. Modulo (left to right) "],
["multiplication-division-left-to-right.html", "Chapter 6 3. Multiplication &amp; Division (left to right)", " Chapter 6 3. Multiplication &amp; Division (left to right) "],
["addition-subtraction-left-to-right.html", "Chapter 7 4. Addition &amp; Subtraction (left to right)", " Chapter 7 4. Addition &amp; Subtraction (left to right) 8 + 16 * 2 / 4 ^ 2 %% 3 "],
["you-can-alter-the-order-of-operations-with-parentheses.html", "Chapter 8 You can alter the order of operations with parentheses", " Chapter 8 You can alter the order of operations with parentheses ((8 + 16) * 2 / 4) ^ (2 %% 3) "],
["r-also-has-lots-of-built-in-math-functions-more-on-functions-later.html", "Chapter 9 R also has lots of built-in math functions (more on functions later)", " Chapter 9 R also has lots of built-in math functions (more on functions later) abs(-3) sqrt(64) factorial(4) "],
["choose-2.html", "Chapter 10 8 choose 2", " Chapter 10 8 choose 2 choose(8, 2) "],
["the-log-function-computes-natural-logs-by-default-but-you-can-also-select.html", "Chapter 11 The log() function computes natural logs by default, but you can also select", " Chapter 11 The log() function computes natural logs by default, but you can also select "],
["other-options-for-this-using-the-base-argument-in-the-function-or-you-can.html", "Chapter 12 other options for this using the base argument in the function, or you can", " Chapter 12 other options for this using the base argument in the function, or you can "],
["use-base-10-log-using-the-function-log10.html", "Chapter 13 use base-10 log using the function log10()", " Chapter 13 use base-10 log using the function log10() log(30) log(64, base = 8) log10(100) "],
["pi-is-a-pre-defined-constant-in-r-accessible-by-just-typing-pi.html", "Chapter 14 pi is a pre-defined constant in R, accessible by just typing pi", " Chapter 14 pi is a pre-defined constant in R, accessible by just typing pi pi "],
["trigonometric-functions-use-radians-by-default.html", "Chapter 15 Trigonometric functions use radians by default", " Chapter 15 Trigonometric functions use radians by default sin(pi / 2) cos(pi) tan(pi / 4) "],
["section.html", "Chapter 16 ———–", " Chapter 16 ———– "],
["variables.html", "Chapter 17 Variables", " Chapter 17 Variables "],
["section-1.html", "Chapter 18 ———–", " Chapter 18 ———– "],
["variables-are-an-easy-way-to-store-pretty-much-anything-that-you-may-want-to.html", "Chapter 19 Variables are an easy way to store pretty much anything that you may want to", " Chapter 19 Variables are an easy way to store pretty much anything that you may want to "],
["use-later-in-your-code-like-in-python-you-can-use-the-equal-sign-for-this.html", "Chapter 20 use later in your code. Like in Python, you can use the equal sign for this", " Chapter 20 use later in your code. Like in Python, you can use the equal sign for this x = 42 "],
["you-may-have-noticed-by-now-that-i-use-spaces-between-pretty-much-everything-.html", "Chapter 21 You may have noticed by now that I use spaces between pretty much everything.", " Chapter 21 You may have noticed by now that I use spaces between pretty much everything. "],
["this-isnt-necessary-but-it-is-stylistically-preferred-for-instance-this.html", "Chapter 22 This isn’t necessary, but it is stylistically preferred. For instance, this", " Chapter 22 This isn’t necessary, but it is stylistically preferred. For instance, this "],
["will-do-the-same-thing-as-the-above-line.html", "Chapter 23 will do the same thing as the above line", " Chapter 23 will do the same thing as the above line x=42 #ButWhenYouHaveNoSpacesBetweenYourOperationsThingsCanGetHardToRead "],
["however-the-preferred-notation-for-variable-assignment-in-r-is-.html", "Chapter 24 However, the preferred notation for variable assignment in R is &lt;-", " Chapter 24 However, the preferred notation for variable assignment in R is &lt;- "],
["this-is-because-by-default-the-item-on-the-right-is-always-assigned-to.html", "Chapter 25 This is because, by default, the item on the right is always assigned to", " Chapter 25 This is because, by default, the item on the right is always assigned to "],
["the-item-on-the-left-the-arrow-allows-you-to-keep-track-of-this-better.html", "Chapter 26 the item on the left. The arrow allows you to keep track of this better", " Chapter 26 the item on the left. The arrow allows you to keep track of this better y &lt;- 10 "],
["you-can-see-whats-stored-in-the-variable-using-print.html", "Chapter 27 You can see what’s stored in the variable using print()", " Chapter 27 You can see what’s stored in the variable using print() print(y) "],
["but-unlike-in-python-you-dont-have-to-actully-type-print-this-is.html", "Chapter 28 But, unlike in Python, you don’t have to actully type print(); this is", " Chapter 28 But, unlike in Python, you don’t have to actully type print(); this is "],
["actually-what-youve-been-doing-all-along-with-the-other-examples-so-far.html", "Chapter 29 actually what you’ve been doing all along with the other examples so far", " Chapter 29 actually what you’ve been doing all along with the other examples so far y "],
["and-if-youd-like-to-assign-and-print-your-variable-in-the-same-line.html", "Chapter 30 And, if you’d like to assign and print your variable in the same line", " Chapter 30 And, if you’d like to assign and print your variable in the same line (z &lt;- -2) "],
["when-you-have-a-variable-you-can-do-anything-with-it-that-you-could-with-the.html", "Chapter 31 When you have a variable, you can do anything with it that you could with the", " Chapter 31 When you have a variable, you can do anything with it that you could with the "],
["original-value.html", "Chapter 32 original value", " Chapter 32 original value z + 10 x + y "],
["and-we-can-assign-the-results-of-operations-directly-to-new-variables.html", "Chapter 33 And we can assign the results of operations directly to new variables", " Chapter 33 And we can assign the results of operations directly to new variables "],
["you-can-name-variables-anything-you-want-with-some-exceptions-including.html", "Chapter 34 (you can name variables anything you want, with some exceptions, including:", " Chapter 34 (you can name variables anything you want, with some exceptions, including: "],
["no-spaces-no-quotation-marks-no-operators-like-my-variable-10-y.html", "Chapter 35 no spaces, no quotation marks, no operators like +-/*^%&gt;&lt;=!) My_Variable &lt;- 10 + y", " Chapter 35 no spaces, no quotation marks, no operators like +-/*^%&gt;&lt;=!) My_Variable &lt;- 10 + y "],
["and-you-can-also-re-assign-values-to-variables-for-instance-x-was-previously.html", "Chapter 36 And you can also re-assign values to variables- for instance, x was previously", " Chapter 36 And you can also re-assign values to variables- for instance, x was previously "],
["set-to-42-lets-see-what-happens-when-we-assign-12-to-it.html", "Chapter 37 set to 42; let’s see what happens when we assign 12 to it…", " Chapter 37 set to 42; let’s see what happens when we assign 12 to it… x x &lt;- 12 x "],
["values-of-variables-are-calculated-at-assignment-and-are-almost-never.html", "Chapter 38 Values of variables are calculated at assignment, and are (almost never)", " Chapter 38 Values of variables are calculated at assignment, and are (almost never) "],
["recalculated-on-the-fly-if-a-variable-was-used-to-assign-a-value-to-another.html", "Chapter 39 recalculated on the fly (if a variable was used to assign a value to another", " Chapter 39 recalculated on the fly (if a variable was used to assign a value to another "],
["variable-changing-the-value-of-one-after-assignment-will-not-affect-the-value.html", "Chapter 40 variable, changing the value of one after assignment will not affect the value", " Chapter 40 variable, changing the value of one after assignment will not affect the value "],
["of-the-other-they-are-immutable-and-not-passed-by-reference-for-assignment.html", "Chapter 41 of the other- they are immutable and not passed by reference for assignment)", " Chapter 41 of the other- they are immutable and not passed by reference for assignment) (NewVar &lt;- x + y) y &lt;- 24 NewVar "],
["variables-can-be-of-many-different-types-or-classes-in-r.html", "Chapter 42 Variables can be of many different types, or classes, in R:", " Chapter 42 Variables can be of many different types, or classes, in R: "],
["null.html", "Chapter 43 Null", " Chapter 43 Null i &lt;- NULL class(i) "],
["numeric.html", "Chapter 44 Numeric", " Chapter 44 Numeric j &lt;- 2 class(j) "],
["integer-must-be-stated-strictly.html", "Chapter 45 Integer (must be stated strictly)", " Chapter 45 Integer (must be stated strictly) k &lt;- as.integer(4) class(k) "],
["logical-true-or-false-a-k-a-boolean.html", "Chapter 46 Logical (True or False, a.k.a. Boolean)", " Chapter 46 Logical (True or False, a.k.a. Boolean) l &lt;- TRUE class(l) "],
["character.html", "Chapter 47 Character", " Chapter 47 Character m &lt;- “a” class(m) "],
["section-2.html", "Chapter 48 ———–", " Chapter 48 ———– "],
["functions.html", "Chapter 49 Functions", " Chapter 49 Functions "],
["section-3.html", "Chapter 50 ———–", " Chapter 50 ———– "],
["if-you-have-certain-tasks-that-you-do-a-lot-in-r-the-best-way-to-save-time-is.html", "Chapter 51 If you have certain tasks that you do a lot in R, the best way to save time is", " Chapter 51 If you have certain tasks that you do a lot in R, the best way to save time is "],
["to-automate-these-tasks-by-writing-functions-this-may-sound-daunting-but-it.html", "Chapter 52 to automate these tasks by writing functions. This may sound daunting, but it", " Chapter 52 to automate these tasks by writing functions. This may sound daunting, but it "],
["really-isnt-functions-have-only-three-key-parts-argument-body-and-return.html", "Chapter 53 really isn’t- functions have only three key parts: argument, body, and return", " Chapter 53 really isn’t- functions have only three key parts: argument, body, and return "],
["the-way-you-create-a-function-in-r-is-very-similar-to-how-you-would-create-a.html", "Chapter 54 The way you create a function in R is very similar to how you would create a", " Chapter 54 The way you create a function in R is very similar to how you would create a "],
["variable-for-this-function-we-are-just-multiplying-a-number-by-two.html", "Chapter 55 variable. For this function, we are just multiplying a number by two", " Chapter 55 variable. For this function, we are just multiplying a number by two multiply_by_two &lt;- function(argument) { x &lt;- argument * 2 return(x) } multiply_by_two(3) "],
["you-can-also-make-functions-that-take-multiple-inputs-or-arguments-but-you.html", "Chapter 56 You can also make functions that take multiple inputs, or arguments (but you", " Chapter 56 You can also make functions that take multiple inputs, or arguments (but you "],
["dont-have-to-name-them-argument-like-i-did-in-the-first-example-you-do.html", "Chapter 57 don’t have to name them “argument” like I did in the first example; you do", " Chapter 57 don’t have to name them “argument” like I did in the first example; you do "],
["have-to-use-the-word-function-when-creating-a-function-though-and-you.html", "Chapter 58 have to use the word “function” when creating a function though, and you", " Chapter 58 have to use the word “function” when creating a function though, and you "],
["should-also-use-return-at-the-end-of-the-function.html", "Chapter 59 should also use “return” at the end of the function)", " Chapter 59 should also use “return” at the end of the function) multiply &lt;- function(a, b) { return(a * b) } multiply(3, 4) "],
["but-it-is-important-to-note-that-named-arguments-are-only-accessible-within.html", "Chapter 60 But it is important to note that named arguments are only accessible within", " Chapter 60 But it is important to note that named arguments are only accessible within "],
["the-function-where-they-appear.html", "Chapter 61 the function where they appear", " Chapter 61 the function where they appear a b "],
["the-same-goes-for-variables-that-are-initialized-within-functions.html", "Chapter 62 …the same goes for variables that are initialized within functions", " Chapter 62 …the same goes for variables that are initialized within functions my_function &lt;- function(c) { d &lt;- c ^ c return(d) } my_function(3) d "],
["this-is-due-to-a-phenomenon-called-lexical-scoping-variables-will-only-be.html", "Chapter 63 This is due to a phenomenon called lexical scoping: variables will only be", " Chapter 63 This is due to a phenomenon called lexical scoping: variables will only be "],
["available-or-changeable-in-the-the-context-in-which-they-are-created-and-all.html", "Chapter 64 available or changeable in the the context in which they are created (and all", " Chapter 64 available or changeable in the the context in which they are created (and all "],
["contexts-that-are-built-from-that-context-this-means-that-a-variable-that-is.html", "Chapter 65 contexts that are built from that context). This means that a variable that is", " Chapter 65 contexts that are built from that context). This means that a variable that is "],
["initialized-outside-of-a-function-in-the-global-scope-will-be-available.html", "Chapter 66 initialized outside of a function (in the “global” scope) will be available", " Chapter 66 initialized outside of a function (in the “global” scope) will be available "],
["in-both-the-global-and-function-scope-remember-that-we-initialized-z-to-2.html", "Chapter 67 in both the global and function scope; remember that we initialized z to -2", " Chapter 67 in both the global and function scope; remember that we initialized z to -2 my_other_function &lt;- function(arg) { return(arg * z) } my_other_function(4) "],
["but-if-we-change-the-value-of-a-global-variable-in-the-function-scope-this.html", "Chapter 68 …but if we change the value of a global variable in the function scope, this", " Chapter 68 …but if we change the value of a global variable in the function scope, this "],
["will-not-carry-back-over-to-the-more-general-global-scope.html", "Chapter 69 will not carry back over to the more general global scope", " Chapter 69 will not carry back over to the more general global scope my_other_other_function &lt;- function(f) { z &lt;- f ^ 3 return(z) } my_other_other_function(2) z "],
["one-last-thing-about-functions-for-today-you-can-save-the-return-values-of.html", "Chapter 70 One last thing about functions for today: you can save the return values of", " Chapter 70 One last thing about functions for today: you can save the return values of "],
["functions-as-variables-this-will-make-it-so-that-you-dont-have-to.html", "Chapter 71 functions as variables- this will make it so that you don’t have to", " Chapter 71 functions as variables- this will make it so that you don’t have to "],
["recalculate-functions-each-time-you-want-to-use-the-same-output.html", "Chapter 72 recalculate functions each time you want to use the same output", " Chapter 72 recalculate functions each time you want to use the same output h &lt;- choose(20, 2) h "],
["theres-a-lot-more-that-you-can-do-with-functions-and-well-come-back-to.html", "Chapter 73 There’s a lot more that you can do with functions, and we’ll come back to", " Chapter 73 There’s a lot more that you can do with functions, and we’ll come back to "],
["functions-throughout-the-course-as-we-get-deeper-into-rs-capabilities.html", "Chapter 74 functions throughout the course as we get deeper into R’s capabilities!", " Chapter 74 functions throughout the course as we get deeper into R’s capabilities! "],
["its-best-practice-with-r-code-to-always-end-your-script-with-an-empty-line.html", "Chapter 75 It’s best practice with R code to always end your script with an empty line", " Chapter 75 It’s best practice with R code to always end your script with an empty line "],
["intro.html", "Chapter 76 Introduction", " Chapter 76 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 76. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter 78. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 76.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 76.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 76.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 76.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2018) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "]
]
